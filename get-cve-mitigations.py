import argparse
import datetime
import json
import os.path
import sys
import requests
import wget

from dotenv import dotenv_values


def parse_arguments():
    """ Parse command line arguments. """
    parser = argparse.ArgumentParser(
        description="""This script retrieves mitigations from the MITRE ATT&CK database for given CVEs or TTPs. It 
        can extract TTPs from a list of CVEs (from alienvault.com) and find corresponding mitigations, or directly 
        retrieve mitigations for given TTPs. Additionally, it supports updating local MITRE ATT&CK data files and can 
        leverage an external API for enhanced CVE to TTP mapping."""
    )
    parser.add_argument(
        '-c', '--cve',
        type=lambda x: [str.strip(i) for i in x.split(',')],
        help="""Comma-separated list of CVE identifiers. This script will extract TTPs from CVEs (from 
        alienvault.com) and find corresponding mitigations. Example for a single CVE: -c/--cve CVE-2021-44228 Example 
        for multiple CVEs: -c/--cve "CVE-2021-44228,CVE-2017-6742"""
    )
    parser.add_argument(
        '-t', '--ttp',
        type=lambda x: [str.strip(i) for i in x.split(',')],
        help="""
        Comma-separated list of TTP identifiers for which the script will find mitigations.
        Example for a single TTP: -t/--ttp T1078
        Example for multiple TTPs: -t/--ttp "TA0001,T1190,T1059.004"
        """
    )
    parser.add_argument(
        '-u', '--update',
        action='store_true',
        default=False,
        help="""
        Boolean flag to trigger the update (download) of local MITRE ATT&CK data file (enterprise-attack.json).
        Use '-u/--update' to enable this option. By default, this option is set to False.
        """
    )
    parser.add_argument(
        '-a', '--api',
        type=str,
        help="""
        API key for accessing enhanced CVE to TTP mapping through the https://otx.alienvault.com/ service.
        Provide the API key to enable this feature.
        Note: This argument must be used in conjunction with the '-c/--cve' argument.
        Example: -c/--cve CVE-2021-44228 -a/--api YOUR_API_KEY
        """
    )
    arguments = parser.parse_args()
    if len(sys.argv) > 1:
        if not (arguments.cve or arguments.ttp or arguments.update):
            parser.error('one of the arguments -c/--cve -t/--ttp -u/--update is required')
        if arguments.api and not arguments.cve:
            parser.error(f"argument -a/--api: argument -c/--cve is required")
    return arguments


def print_menu():
    """ Displays a console menu with options for different operations. """
    menu_options = {
        1: 'Get mitigations for TTPs from CVEs',
        2: 'Get mitigations for a list of TTPs',
        3: 'Update MITRE ATT&CK Enterprise Matrix',
        0: 'Exit'
    }
    max_len = max(map(len, menu_options.values()))
    print('-' * (max_len + 5))
    for key, value in menu_options.items():
        print(f"[{key}] {value}")
    print('-' * (max_len + 5))


def bar_progress(current, total, width=100):
    """ Updates and displays a progress bar for the wget download process. """
    progress_message = "Progress: %d%%" % (current / total * 100)
    sys.stdout.write("\r" + progress_message)
    sys.stdout.flush()


def update_matrix():
    """ Update 'enterprise-attack.json' file from MITRE GitHub. """
    try:
        matrix_filename = 'enterprise-attack.json'
        url = 'https://raw.githubusercontent.com/mitre/cti/master/enterprise-attack/enterprise-attack.json'
        if os.path.exists(matrix_filename):
            os.remove(matrix_filename)
        print(f"[INFO]: Downloading '{matrix_filename}' file from MITRE GitHub:")
        wget.download(url, matrix_filename, bar=bar_progress)
        print('\n[INFO]: Download completed successfully!')
        return
    except Exception as e:
        print(f"[ERROR]: {e}")


def get_attack_ids(cve_list: list, api_key: str):
    """ Get information for given CVEs from OTX Alienvault or a local JSON file. """
    try:
        if not api_key:
            print(f"[ERROR]: Please add the API key to the .env file!")
            return
        for cve in cve_list:
            if not os.path.isfile(f"{cve}.json"):
                print(f"[INFO]: Get information for {cve} from OTX Alienvault...", end='')
                headers_alienvault = {'X-OTX-API-KEY': api_key}
                url = f"https://otx.alienvault.com/api/v1/indicators/cve/{cve}"
                response = requests.get(url, headers=headers_alienvault)
                data = response.json()
            else:
                print(f"[INFO]: Get information for {cve} from a local JSON file...", end='')
                with open(f"{cve}.json", encoding='UTF-8') as file:
                    data = json.load(file)
            if data and data['pulse_info']['count']:
                print('Done!')
            else:
                print(f"\n[INFO]: Information for {cve} not found.")
                return
            attack_ids = []
            subs_list = dict()
            count = data['pulse_info']['count']
            for i in range(count):
                subs_list[i] = int(data['pulse_info']['pulses'][i]['subscriber_count'])
            best_pulses = [key for key, value in sorted(subs_list.items(), key=lambda x: x[1], reverse=True)[:3]]
            for i in best_pulses:
                for j in range(len(data['pulse_info']['pulses'][i]['attack_ids'])):
                    attack_ids.append(data['pulse_info']['pulses'][i]['attack_ids'][j]['id'])
            if attack_ids:
                get_ttp_info(attack_ids, cve)
            else:
                print(f"[INFO]: TTPs for {cve} not found.")
        return
    except Exception as e:
        print(f"[ERROR]: {e}")


def get_ttp_info(attack_ids: list, cve: str = None):
    """ Get techniques and mitigations from MITRE ATT&CK Enterprise matrix. """
    try:
        print(f"[INFO]: Get mitigations...", end='')
        strings = dict()
        tactics = []
        with open('enterprise-attack.json', encoding='utf-8') as f:
            matrix = json.load(f)
        total_attack = set(attack_ids)
        for i, attack_id in enumerate(total_attack, 1):
            if attack_id.startswith('TA'):
                tactics.append(f"[[{attack_id}]](https://attack.mitre.org/tactics/{attack_id})")
                continue
            technique = list(filter(
                lambda x: x['type'] == 'attack-pattern' and x['external_references'][0]['external_id'] == attack_id,
                matrix['objects']))
            if technique:
                technique_url = technique[0]['external_references'][0]['url']
                target_ref = technique[0]['id']
                mitigations = list(filter(lambda x: 'target_ref' in x and x[
                    'target_ref'] == target_ref and x['relationship_type'] == 'mitigates', matrix['objects']))
                if mitigations:
                    for mitigation in mitigations:
                        source_ref = mitigation['source_ref']
                        mitigation_desc = mitigation['description'].replace('\n', ' ')
                        mitigation_obj = list(
                            filter(lambda x: x['type'] == 'course-of-action' and x['id'] == source_ref,
                                   matrix['objects']))[0]
                        mitigation_id = mitigation_obj['external_references'][0]['external_id']
                        mitigation_url = mitigation_obj['external_references'][0]['url']
                        mitigation_name = mitigation_obj['name']
                        key = f"[[{mitigation_id} - {mitigation_name}]]({mitigation_url}) - {mitigation_desc}"
                        value = f"[[{attack_id}]]({technique_url})"
                        strings.setdefault(key, []).append(value)
        print('Done!')
        create_md(strings, tactics, cve)
        return
    except Exception as e:
        print(f"[ERROR]: {e}")


def create_md(mitigs: dict, tactics: list, cve: str):
    """Generate a Markdown file with the listed mitigations."""
    if cve:
        filename = f"Mitigations_for_{cve}.md"
    else:
        filename = f"Mitigations_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
    if mitigs:
        with open(filename, 'w') as file:
            if cve:
                string = f"Mitigations for [[{cve}]](https://nvd.nist.gov/vuln/detail/{cve}) (count: {len(mitigs)}):\n"
                file.write(f"{string}\n")
                print(string)
            else:
                string = f"Mitigations (count: {len(mitigs)}):\n"
                file.write(f"{string}\n")
                print(string)
            if tactics:
                tactics = "&emsp;".join(sorted(tactics))
                string = f"Tactics: {tactics}"
                file.write(f"{string}\n")
                print(string)
            for key, value in sorted(mitigs.items(), key=lambda x: int(x[0][3:7])):
                string = f"{key} - {'&emsp;'.join(sorted(value, key=lambda x: (x[3:7], len(x))))}"
                file.write(f"\n{string}\n")
                print(string)
            if cve:
                string = f"CVE Link on [[Alienvault]](https://otx.alienvault.com/indicator/cve/{cve})"
                file.write(f"\n{string}")
                print(string)
    else:
        print(f"Mitigations not found.")


def main(arguments, api_key: str = ''):
    """ Interacts with the user to execute various functions based on user choices. """
    try:
        if not os.path.isfile('enterprise-attack.json') or arguments.update:
            update_matrix()
        if len(sys.argv) == 1:
            choice = ''
            while choice not in (1, 2, 3, 0):
                print_menu()
                try:
                    choice = int(input('Enter your choice: '))
                except:
                    print('Wrong input. Please enter a number ...')

            if choice == 1:
                cve = input('Enter the list of CVEs (separated by commas): ').split(',')
                get_attack_ids([str.strip(i) for i in cve], api_key)
            elif choice == 2:
                attack_ids = input('Enter the list of TTP IDs (separated by commas): ').split(',')
                get_ttp_info([str.strip(i) for i in attack_ids])
            elif choice == 3:
                update_matrix()
            elif choice == 0:
                print('Bye!')
                return
            else:
                print('Wrong input. Please enter a number ...')
        else:
            if args.api:
                api_key = args.api
            if args.cve:
                get_attack_ids(args.cve, api_key)
            if args.ttp:
                get_ttp_info(args.ttp)
        return
    except Exception as e:
        print(e)


if __name__ == "__main__":
    try:
        args = parse_arguments()
        # Get api key from .env
        dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
        config = dotenv_values(dotenv_path)
        API_KEY_ALIENVAULT = config.get("API_KEY_ALIENVAULT")

        main(args, API_KEY_ALIENVAULT)
    except Exception as e:
        print(e)
